<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AM207</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/" rel="alternate"></link><link href="http://iacs-courses.seas.harvard.edu/courses/am207/feeds/all.atom.xml" rel="self"></link><id>http://iacs-courses.seas.harvard.edu/courses/am207/</id><updated>2014-01-16T16:07:45-05:00</updated><entry><title>Installing Python</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/installing-python.html" rel="alternate"></link><updated>2014-01-16T16:07:45-05:00</updated><author><name>Rahul Dave</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-16:blog/installing-python.html</id><summary type="html">&lt;p&gt;(This is stolen and adapted from CS109 python installation instructions)&lt;/p&gt;
&lt;p&gt;All the labs and homeworks in this course are Python-based. This page provides information about configuring Python on your machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 0&lt;/strong&gt; 
The IPython notebook runs in the browser, and works best in Google Chrome. You probably want to use Chrome for assignments in this course&lt;/p&gt;
&lt;h3&gt;Recommended Method: Anaconda&lt;/h3&gt;
&lt;p&gt;The Anaconda Python distribution is an easily-installable bundle of Python and many of the libraries used throughout this class. It includes numpy/scipy/matplotlib/pandas/scikit-learn and other numerical libraries. Unless you have a good reason not to, we recommend that you use Anaconda.&lt;/p&gt;
&lt;h4&gt;Mac/Linux users&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="http://continuum.io/downloads"&gt;appropriate version&lt;/a&gt; of Anaconda&lt;/li&gt;
&lt;li&gt;Follow the instructions on that page to run the installer&lt;/li&gt;
&lt;li&gt;Test it out: open a terminal window, and type &lt;code&gt;python&lt;/code&gt;, you should see something like&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7.5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Anaconda&lt;/span&gt; &lt;span class="mf"&gt;1.6.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;Anaconda&lt;/code&gt; doesn't appear on the first line, you are using a different version of Python. See the troubleshooting section below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test out the IPython notebook: open a Terminal window, and type &lt;code&gt;ipython notebook&lt;/code&gt;. A new browser window should pop up. &lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;New Notebook&lt;/code&gt; to create a new notebook file&lt;/li&gt;
&lt;li&gt;Update IPython to the newest version by typing &lt;code&gt;conda update ipython&lt;/code&gt; at the command line&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Windows Users&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="http://continuum.io/downloads"&gt;appropriate version&lt;/a&gt; of Anaconda&lt;/li&gt;
&lt;li&gt;Follow the instructions on that page to run the installer. This will create a directory at &lt;code&gt;C:\Anaconda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test it out: start the Anaconda launcher, which you can find in &lt;code&gt;C:\Anaconda&lt;/code&gt; or, in the Start menu. Start the IPython notebook. A new browser window should open. &lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;New Notebook&lt;/code&gt;, which should open a new page.&lt;/li&gt;
&lt;li&gt;Update IPython to the newest version by opening a command prompt, and typing &lt;code&gt;conda update ipython&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Opening IPython Notebooks&lt;/h3&gt;
&lt;p&gt;To view an IPython notebook, you must first start the IPython notebook server in the directory where the file lives. Simply navigate to this directory at the command prompt, and type &lt;code&gt;ipython notebook&lt;/code&gt;. This will open a browser window, listing all the &lt;code&gt;ipynb&lt;/code&gt; files in that directory.&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;
When you start python, you don't see a line like &lt;code&gt;Python 2.7.5 |Anaconda 1.6.1 (x86_64)|&lt;/code&gt;. You are using a Mac or Linux computer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;
You are most likely running a different version of Python, and need to modify your Path (the list of directories your computer looks through to find programs). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;
Find a file like &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.bashrc&lt;/code&gt;, or &lt;code&gt;.profile&lt;/code&gt;. Open the file in a text editor, and add a line at this line at the end: &lt;code&gt;export PATH="$HOME/anaconda/bin:$PATH"&lt;/code&gt;. Close the file, open a new terminal window, type &lt;code&gt;source ~/.profile&lt;/code&gt; (or whatever file you just edited). Type &lt;code&gt;which python&lt;/code&gt; -- you should see a path that points to the anaconda directory. If so, running &lt;code&gt;python&lt;/code&gt; should load the proper version&lt;/p&gt;
&lt;p&gt;If this doesn't work (typing &lt;code&gt;which python&lt;/code&gt; doesn't point to anaconda), you might be using a different shell. Type &lt;code&gt;echo $SHELL&lt;/code&gt;. If this isn't &lt;code&gt;bash&lt;/code&gt;, you need to edit a different startup file (for example, if if &lt;code&gt;echo $SHELL&lt;/code&gt; gives &lt;code&gt;$csh&lt;/code&gt;, you need to edit your &lt;code&gt;.cshrc&lt;/code&gt; file. The syntax for this file is slightly different: &lt;code&gt;set PATH = ($HOME/anaconda/bin $PATH)&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;
You are running the right version of python (see above item), but are unable to import numpy. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;
You are probably loading a different copy of numpy that is incompatible with Anaconda&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;
See the above item to find your &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.profile&lt;/code&gt;, or &lt;code&gt;.bashrc&lt;/code&gt; file. Open it, and add the line &lt;code&gt;unset PYTHONPATH&lt;/code&gt; at the end. Close the file, open a new terminal window, type &lt;code&gt;source ~/.profile&lt;/code&gt; (or whatever file you just edited), and try again.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;
Under Windows, you receive an error message similar to the following: "'pip' is not recognized as an internal or external command, operable program or batch file."&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;
The correct Anaconda paths might not be present in your PATH variable, or Anaconda might not have installed correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;
Ensure the Anaconda directories to your path environment variable ("\Anaconda" and "\Anaconda\Scripts").  See &lt;a href="http://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them"&gt;this page&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;If this does not correct the problem, reinstall Anaconda.&lt;/p&gt;</summary></entry><entry><title>Schedule of Labs</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/schedule-of-labs.html" rel="alternate"></link><updated>2014-01-16T14:27:58-05:00</updated><author><name>Rahul Dave</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-16:blog/schedule-of-labs.html</id><summary type="html">&lt;p&gt;We will have 12 labs during the semester given on Friday at 11:00am-12:30pm. The goal of the labs is to go through some real world problems while reviewing the material from class. The labs will be helpful in doing the homework: you are strongly encouraged to attend. Since the lab also does real world applications, it will help you do your project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python numerical stack tutorial&lt;/li&gt;
&lt;li&gt;Frequentist examples&lt;/li&gt;
&lt;li&gt;Priors, how, what and when &lt;/li&gt;
&lt;li&gt;MCMC on the cloud&lt;/li&gt;
&lt;li&gt;Gibbs on steroids&lt;/li&gt;
&lt;li&gt;r u NUTS? More on Hamiltonian MC &lt;/li&gt;
&lt;li&gt;The art of motorcycle maintenance and SA &lt;/li&gt;
&lt;li&gt;GA for the masses &lt;/li&gt;
&lt;li&gt;Stockwits. Predicting the financial market using sentiment analysis and Sequential Monte Carlo &lt;/li&gt;
&lt;li&gt;CO2 prediction. Gaussian Process application &lt;/li&gt;
&lt;li&gt;All you wanted to know about PGM &lt;/li&gt;
&lt;li&gt;(If time permits) Dynamic Bayesian Averaging. Various applications and examples &lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Homeworks and homework policies</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/homeworks-and-homework-policies.html" rel="alternate"></link><updated>2014-01-16T14:26:35-05:00</updated><author><name>Pavlos Protopapas</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-16:blog/homeworks-and-homework-policies.html</id><summary type="html">&lt;h4&gt;Homework Schedule&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;There will be 10 problem sets during the semester. Problem sets are handed out weekly (on Thursday) and are due the following Thursday, at 11.59PM, unless otherwise announced.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Homework Policies&lt;/h4&gt;
&lt;p&gt;Students are encouraged to work in groups of three or less for the homework and final project. Collaboration means you work together; it does not mean you split the work. Each student is expected to work on all homeworks and all questions. You should hand in one solution per group, but you should all work on all problems together.&lt;/p&gt;
&lt;p&gt;The goal of the assignments is to develop your computational skills while learning the essential stochastic methods.
 
There will be 10 problem sets during the semester.  Problem sets are handed out weekly (on Thursday) and are due the following Thursday, at 11.59PM, unless otherwise announced.
 
An isite with a dropbox will be provided for your homework and project submissions. The dropbox for each homework and project will close on the deadline for that piece of work. NO work will be accepted after the deadline. Do not submit in the last seconds before the dropbox closes.&lt;/p&gt;
&lt;p&gt;Each student is given 4 late days for homework at the beginning of the semester. A late day extends the individual homework deadline by 24 hours without penalty. No more than two late days may be used on any one assignment. Assignments handed in more than 48 hours after the original deadline will NOT be graded.&lt;/p&gt;
&lt;p&gt;Late days are intended to give you flexibility: you can use them for any reason - no questions asked. You don't get any bonus points for not using your late days. Also, you can only use late days for the individual homework deadlines, and not for your project (see below)&lt;/p&gt;
&lt;p&gt;We understand, however, that medical factors may occasionally interfere with your ability to participate or to hand in work on time. If that factor is an extenuating circumstance, we will ask you to provide documentation directly issued by the University, and we will try to work out an agreeable solution with you (and your teammates).&lt;/p&gt;
&lt;p&gt;If you believe there is an error in your assignment grading, please submit an explanation via email to us  within 3 days of receiving the grade. No regrade requests will be accepted orally, and no regrade requests will be accepted more than 3 days after you receive the grade for the assignment.&lt;/p&gt;</summary></entry><entry><title>Projects and project policies</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/projects-and-project-policies.html" rel="alternate"></link><updated>2014-01-16T14:25:52-05:00</updated><author><name>Pavlos Protopapas</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-16:blog/projects-and-project-policies.html</id><summary type="html">&lt;h4&gt;Project Schedule&lt;/h4&gt;
&lt;p&gt;Yet to be determined.&lt;/p&gt;
&lt;h4&gt;Project Policies&lt;/h4&gt;
&lt;p&gt;In addition to the homework there will be a final project. The final project will be done over a period of 5 weeks, the first two of which will be concommitant with homeworks. In these two weeks, you will be expected to come up with and submit a proposal for the final project. There will be no homework for the last three weeks of the course, so as to provide you ample time to work on your project.&lt;/p&gt;
&lt;p&gt;You will be expected to produce a written paper and a poster to showcase your project. All code used for the project must also be submitted.&lt;/p&gt;
&lt;p&gt;The dropbox for the project will close on the deadline for that piece of work. NO work will be accepted after the deadline. Do not submit in the last seconds before the dropbox closes.&lt;/p&gt;</summary></entry><entry><title>Schedule of Lectures</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/schedule-of-lectures.html" rel="alternate"></link><updated>2014-01-16T14:25:34-05:00</updated><author><name>Pavlos Protopapas</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-16:blog/schedule-of-lectures.html</id><summary type="html">&lt;p&gt;A tentative schedule can be seen &lt;a href="/courses/am207/schedule.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Homework 0</title><link href="http://iacs-courses.seas.harvard.edu/courses/am207/blog/homework-0.html" rel="alternate"></link><updated>2014-01-07T18:21:57-05:00</updated><author><name>Rahul Dave</name></author><id>tag:iacs-courses.seas.harvard.edu/courses/am207,2014-01-07:blog/homework-0.html</id><summary type="html">&lt;p&gt;This is a homework to try, but not hand in. If you find this homework easy, this class is too easy for you. If you cant do any question, its too hard. If you can do some questions, then this is the right class for you.&lt;/p&gt;
&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="homework-0"&gt;Homework 0&lt;/h1&gt;
&lt;h3 id="due-tuesday-september-10-but-no-submission-is-required"&gt;Due Tuesday, September 10 (but no submission is required)&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;Welcome to CS109 / STAT121 / AC209 / E-109 (http://cs109.org/). In this class, we will be using a variety of tools that will require some initial configuration. To ensure everything goes smoothly moving forward, we will setup the majority of those tools in this homework. While some of this will likely be dull, doing it now will enable us to do more exciting work in the weeks that follow without getting bogged down in further software configuration. This homework will not be graded, however it is essential that you complete it timely since it will enable us to set up your accounts. You do not have to hand anything in, with the exception of filling out the online survey.&lt;/p&gt;
&lt;h2 id="class-survey-piazza-and-introduction"&gt;Class Survey, Piazza, and Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Class Survey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please complete the mandatory course survey located &lt;a href="https://docs.google.com/spreadsheet/viewform?formkey=dFg1ZFJwLWJ6ZWhWR1JJb0tES3lGMEE6MA#gid=0"&gt;here&lt;/a&gt;. It should only take a few moments of your time. Once you fill in the survey we will sign you up to the course forum on Piazza and the dropbox system that you will use to hand in the homework. It is imperative that you fill out the survey on time as we use the provided information to sign you up for these services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Piazza&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://piazza.com/harvard/fall2013/cs109/home"&gt;Piazza&lt;/a&gt; and sign up for the class using your Harvard e-mail address.&lt;/p&gt;
&lt;p&gt;You will use Piazza as a forum for discussion, to find team members, to arrange appointments, and to ask questions. Piazza should be your primary form of communication with the staff. Use the staff e-mail (staff@cs109.org) only for individual requests, e.g., to excuse yourself from a mandatory guest lecture. All readings, homeworks, and project descriptions will be announced on Piazza first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you are signed up to the Piazza course forum, introduce yourself to your classmates and course staff with a follow-up post in the introduction thread. Include your name/nickname, your affiliation, why you are taking this course, and tell us something interesting about yourself (e.g., an industry job, an unusual hobby, past travels, or a cool project you did, etc.). Also tell us whether you have experience with data science.&lt;/p&gt;
&lt;h2 id="programming-expectations"&gt;Programming expectations&lt;/h2&gt;
&lt;p&gt;All the assignments and labs for this class will use Python and, for the most part, the browser-based IPython notebook format you are currently viewing. Knowledge of Python is not a prerequisite for this course, &lt;strong&gt;provided you are comfortable learning on your own as needed&lt;/strong&gt;. While we have strived to make the programming component of this course straightforward, we will not devote much time to teaching prorgramming or Python syntax. Basically, you should feel comfortable with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to look up Python syntax on Google and StackOverflow.&lt;/li&gt;
&lt;li&gt;Basic programming concepts like functions, loops, arrays, dictionaries, strings, and if statements.&lt;/li&gt;
&lt;li&gt;How to learn new libraries by reading documentation.&lt;/li&gt;
&lt;li&gt;Asking questions on StackOverflow or Piazza.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many online tutorials to introduce you to scientific python programming. &lt;a href="https://github.com/jrjohansson/scientific-python-lectures"&gt;Here is one&lt;/a&gt; that is very nice. Lectures 1-4 are most relevant to this class.&lt;/p&gt;
&lt;h2 id="getting-python"&gt;Getting Python&lt;/h2&gt;
&lt;p&gt;You will be using Python throughout the course, including many popular 3rd party Python libraries for scientific computing. &lt;a href="http://continuum.io/downloads"&gt;Anaconda&lt;/a&gt; is an easy-to-install bundle of Python and most of these libraries. We recommend that you use Anaconda for this course.&lt;/p&gt;
&lt;p&gt;Please visit &lt;a href="https://github.com/cs109/content/wiki/Installing-Python"&gt;this page&lt;/a&gt; and follow the instructions to set up Python&lt;/p&gt;
&lt;p&gt;&lt;hline&gt;&lt;/hline&gt;&lt;/p&gt;
&lt;h2 id="hello-python"&gt;Hello, Python&lt;/h2&gt;
&lt;p&gt;The IPython notebook is an application to build interactive computational notebooks. You'll be using them to complete labs and homework. Once you've set up Python, please &lt;a download="HW0.ipynb" href="https://raw.github.com/cs109/content/master/HW0.ipynb"&gt;download this page&lt;/a&gt;, and open it with IPython by typing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipython notebook &amp;lt;name_of_downloaded_file&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the rest of the assignment, use your local copy of this page, running on IPython.&lt;/p&gt;
&lt;p&gt;Notebooks are composed of many "cells", which can contain text (like this one), or code (like the one below). Double click on the cell below, and evaluate it by clicking the "play" button above, for by hitting shift + enter&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Item is "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="python-libraries"&gt;Python Libraries&lt;/h2&gt;
&lt;p&gt;We will be using a several different libraries throughout this course. If you've successfully completed the &lt;a href="https://github.com/cs109/content/wiki/Installing-Python"&gt;installation instructions&lt;/a&gt;, all of the following statements should run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [2]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#IPython is what you are using now to run the notebook&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"IPython version:      &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 1.0)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# Numpy is a library for working with Arrays&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Numpy version:        &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 1.7.1)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# SciPy implements many different numerical algorithms&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sp&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"SciPy version:        &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 0.12.0)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# Pandas makes working with data tables easier&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Pandas version:       &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 0.11.0)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# Module for plotting&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Mapltolib version:    &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 1.2.1)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# SciKit Learn implements several Machine Learning algorithms&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Scikit-Learn version: &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 0.13.1)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sklearn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# Requests is a library for getting data from the Web&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"requests version:     &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 1.2.3)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;# Networkx is a library for working with networks&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"NetworkX version:     &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 1.7)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;#BeautifulSoup is a library to parse HTML and XML documents&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"BeautifulSoup version:&lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 3.2)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;#MrJob is a library to run map reduce jobs on Amazon's computers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mrjob&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Mr Job version:       &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 0.4)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;mrjob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;

&lt;span class="c"&gt;#Pattern has lots of tools for working with data from the internet&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pattern&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Pattern version:      &lt;/span&gt;&lt;span class="si"&gt;%6.6s&lt;/span&gt;&lt;span class="s"&gt; (need at least 2.6)"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If any of these libraries are missing or out of date, you will need to &lt;a href="https://github.com/cs109/content/wiki/Installing-Python#installing-additional-libraries"&gt;install them&lt;/a&gt; and restart IPython&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="hello-matplotlib"&gt;Hello matplotlib&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The notebook integrates nicely with Matplotlib, the primary plotting package for python. This should embed a figure of a sine wave:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [3]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#this line prepares IPython for working with matplotlib&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;  

&lt;span class="c"&gt;# this actually imports matplotlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;  

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;#array of 30 points from 0 to 10&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'ro-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'A sine wave'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Noisy sine'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'lower right'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X axis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Y axis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If that last cell complained about the &lt;code&gt;%matplotlib&lt;/code&gt; line, you need to update IPython to v1.0, and restart the notebook. See the &lt;a href="https://github.com/cs109/content/wiki/Installing-Python"&gt;installation page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="hello-numpy"&gt;Hello Numpy&lt;/h2&gt;
&lt;p&gt;The Numpy array processing library is the basis of nearly all numerical computing in Python. Here's a 30 second crash course. For more details, consult Chapter 4 of Python for Data Analysis, or the &lt;a href="http://docs.scipy.org/doc/numpy-dev/user/index.html"&gt;Numpy User's Guide&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [4]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Make a 3 row x 4 column array of random numbers"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Add 1 to every element"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get the element at row 1, column 2"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="c"&gt;# The colon syntax is called "slicing" the array. &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get the first row"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get every 2nd column of the first row"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Print the maximum, minimum, and mean of the array. This does &lt;strong&gt;not&lt;/strong&gt; require writing a loop. In the code cell below, type &lt;code&gt;x.m&amp;lt;TAB&amp;gt;&lt;/code&gt;, to find built-in operations for common array statistics like this&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [5]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Call the &lt;code&gt;x.max&lt;/code&gt; function again, but use the &lt;code&gt;axis&lt;/code&gt; keyword to print the maximum of each row in x.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [6]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here's a way to quickly simulate 500 coin "fair" coin tosses (where the probabily of getting Heads is 50%, or 0.5)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [7]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"number of heads:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Repeat this simulation 500 times, and use the &lt;a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist"&gt;plt.hist() function&lt;/a&gt; to plot a histogram of the number of Heads (1s) in each simulation&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [8]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="the-monty-hall-problem"&gt;The Monty Hall Problem&lt;/h2&gt;
&lt;p&gt;Here's a fun and perhaps surprising statistical riddle, and a good way to get some practice writing python functions&lt;/p&gt;
&lt;p&gt;In a gameshow, contestants try to guess which of 3 closed doors contain a cash prize (goats are behind the other two doors). Of course, the odds of choosing the correct door are 1 in 3. As a twist, the host of the show occasionally opens a door after a contestant makes his or her choice. This door is always one of the two the contestant did not pick, and is also always one of the goat doors (note that it is always possible to do this, since there are two goat doors). At this point, the contestant has the option of keeping his or her original choice, or swtiching to the other unopened door. The question is: is there any benefit to switching doors? The answer surprises many people who haven't heard the question before.&lt;/p&gt;
&lt;p&gt;We can answer the problem by running simulations in Python. We'll do it in several parts.&lt;/p&gt;
&lt;p&gt;First, write a function called &lt;code&gt;simulate_prizedoor&lt;/code&gt;. This function will simulate the location of the prize in many games -- see the detailed specification below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [9]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Function&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;simulate_prizedoor&lt;/span&gt;

&lt;span class="sd"&gt;Generate a random array of 0s, 1s, and 2s, representing&lt;/span&gt;
&lt;span class="sd"&gt;hiding a prize between door 0, door 1, and door 2&lt;/span&gt;

&lt;span class="sd"&gt;Parameters&lt;/span&gt;
&lt;span class="sd"&gt;----------&lt;/span&gt;
&lt;span class="sd"&gt;nsim : int&lt;/span&gt;
&lt;span class="sd"&gt;    The number of simulations to run&lt;/span&gt;

&lt;span class="sd"&gt;Returns&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;sims : array&lt;/span&gt;
&lt;span class="sd"&gt;    Random array of 0s, 1s, and 2s&lt;/span&gt;

&lt;span class="sd"&gt;Example&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; print simulate_prizedoor(3)&lt;/span&gt;
&lt;span class="sd"&gt;array([0, 0, 2])&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simulate_prizedoor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nsim&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;#compute here&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;
&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Next, write a function that simulates the contestant's guesses for &lt;code&gt;nsim&lt;/code&gt; simulations. Call this function &lt;code&gt;simulate_guess&lt;/code&gt;. The specs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [10]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Function&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;simulate_guess&lt;/span&gt;

&lt;span class="sd"&gt;Return any strategy for guessing which door a prize is behind. This&lt;/span&gt;
&lt;span class="sd"&gt;could be a random strategy, one that always guesses 2, whatever.&lt;/span&gt;

&lt;span class="sd"&gt;Parameters&lt;/span&gt;
&lt;span class="sd"&gt;----------&lt;/span&gt;
&lt;span class="sd"&gt;nsim : int&lt;/span&gt;
&lt;span class="sd"&gt;    The number of simulations to generate guesses for&lt;/span&gt;

&lt;span class="sd"&gt;Returns&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;guesses : array&lt;/span&gt;
&lt;span class="sd"&gt;    An array of guesses. Each guess is a 0, 1, or 2&lt;/span&gt;

&lt;span class="sd"&gt;Example&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; print simulate_guess(5)&lt;/span&gt;
&lt;span class="sd"&gt;array([0, 0, 0, 0, 0])&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Next, write a function, &lt;code&gt;goat_door&lt;/code&gt;, to simulate randomly revealing one of the goat doors that a contestant didn't pick.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [11]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Function&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;goat_door&lt;/span&gt;

&lt;span class="sd"&gt;Simulate the opening of a "goat door" that doesn't contain the prize,&lt;/span&gt;
&lt;span class="sd"&gt;and is different from the contestants guess&lt;/span&gt;

&lt;span class="sd"&gt;Parameters&lt;/span&gt;
&lt;span class="sd"&gt;----------&lt;/span&gt;
&lt;span class="sd"&gt;prizedoors : array&lt;/span&gt;
&lt;span class="sd"&gt;    The door that the prize is behind in each simulation&lt;/span&gt;
&lt;span class="sd"&gt;guesses : array&lt;/span&gt;
&lt;span class="sd"&gt;    THe door that the contestant guessed in each simulation&lt;/span&gt;

&lt;span class="sd"&gt;Returns&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;goats : array&lt;/span&gt;
&lt;span class="sd"&gt;    The goat door that is opened for each simulation. Each item is 0, 1, or 2, and is different&lt;/span&gt;
&lt;span class="sd"&gt;    from both prizedoors and guesses&lt;/span&gt;

&lt;span class="sd"&gt;Examples&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; print goat_door(np.array([0, 1, 2]), np.array([1, 1, 1]))&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; array([2, 2, 0])&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Write a function, &lt;code&gt;switch_guess&lt;/code&gt;, that represents the strategy of always switching a guess after the goat door is opened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [12]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Function&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;switch_guess&lt;/span&gt;

&lt;span class="sd"&gt;The strategy that always switches a guess after the goat door is opened&lt;/span&gt;

&lt;span class="sd"&gt;Parameters&lt;/span&gt;
&lt;span class="sd"&gt;----------&lt;/span&gt;
&lt;span class="sd"&gt;guesses : array&lt;/span&gt;
&lt;span class="sd"&gt;     Array of original guesses, for each simulation&lt;/span&gt;
&lt;span class="sd"&gt;goatdoors : array&lt;/span&gt;
&lt;span class="sd"&gt;     Array of revealed goat doors for each simulation&lt;/span&gt;

&lt;span class="sd"&gt;Returns&lt;/span&gt;
&lt;span class="sd"&gt;-------&lt;/span&gt;
&lt;span class="sd"&gt;The new door after switching. Should be different from both guesses and goatdoors&lt;/span&gt;

&lt;span class="sd"&gt;Examples&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; print switch_guess(np.array([0, 1, 2]), np.array([1, 2, 1]))&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; array([2, 0, 0])&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Last function: write a &lt;code&gt;win_percentage&lt;/code&gt; function that takes an array of &lt;code&gt;guesses&lt;/code&gt; and &lt;code&gt;prizedoors&lt;/code&gt;, and returns the percent of correct guesses&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [13]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Function&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;win_percentage&lt;/span&gt;

&lt;span class="sd"&gt;Calculate the percent of times that a simulation of guesses is correct&lt;/span&gt;

&lt;span class="sd"&gt;Parameters&lt;/span&gt;
&lt;span class="sd"&gt;-----------&lt;/span&gt;
&lt;span class="sd"&gt;guesses : array&lt;/span&gt;
&lt;span class="sd"&gt;    Guesses for each simulation&lt;/span&gt;
&lt;span class="sd"&gt;prizedoors : array&lt;/span&gt;
&lt;span class="sd"&gt;    Location of prize for each simulation&lt;/span&gt;

&lt;span class="sd"&gt;Returns&lt;/span&gt;
&lt;span class="sd"&gt;--------&lt;/span&gt;
&lt;span class="sd"&gt;percentage : number between 0 and 100&lt;/span&gt;
&lt;span class="sd"&gt;    The win percentage&lt;/span&gt;

&lt;span class="sd"&gt;Examples&lt;/span&gt;
&lt;span class="sd"&gt;---------&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; print win_percentage(np.array([0, 1, 2]), np.array([0, 0, 0]))&lt;/span&gt;
&lt;span class="sd"&gt;33.333&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now, put it together. Simulate 10000 games where contestant keeps his original guess, and 10000 games where the contestant switches his door after a goat door is revealed. Compute the percentage of time the contestant wins under either strategy. Is one strategy better than the other?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In [14]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#your code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Many people find this answer counter-intuitive (famously, PhD mathematicians have incorrectly claimed the result must be wrong. Clearly, none of them knew Python).&lt;/p&gt;
&lt;p&gt;One of the best ways to build intuition about why opening a Goat door affects the odds is to re-run the experiment with 100 doors and one prize. If the game show host opens 98 goat doors after you make your initial selection, would you want to keep your first pick or switch? Can you generalize your simulation code to handle the case of &lt;code&gt;n&lt;/code&gt; doors?&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry></feed>